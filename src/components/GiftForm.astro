---
export interface Props {
  prefilledName?: string;
}

const { prefilledName = '' } = Astro.props;
---

<form id="giftForm" class="space-y-6">
  <!-- Name Input -->
  <div>
    <label for="giftName" class="block text-sm font-medium text-slate-700 mb-2">
      Meno osl√°venca
    </label>
    <input
      type="text"
      id="giftName"
      name="name"
      placeholder="Zadajte meno"
      value={prefilledName}
      class="w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
    />
  </div>

  <!-- Budget Selection -->
  <div class="bg-slate-50 p-4 rounded-lg">
    <h3 class="text-base font-semibold text-slate-800 mb-3">Rozpoƒçet</h3>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
      {[
        { value: '10-30', label: '10‚Äì30 ‚Ç¨', description: 'Rozpoƒçtov√©', icon: 'üí∞' },
        { value: '30-60', label: '30‚Äì60 ‚Ç¨', description: 'Stredn√©', icon: 'üíé' },
        { value: '60+', label: '60+ ‚Ç¨', description: 'Luxusn√©', icon: 'üëë' }
      ].map((option) => (
        <label class="cursor-pointer group">
          <input
            type="radio"
            name="budget"
            value={option.value}
            class="sr-only"
            checked={option.value === '30-60'}
          />
          <div class="budget-option flex flex-col items-center p-3 bg-white border-2 border-slate-200 rounded-lg hover:border-indigo-400 hover:shadow-sm transition-all duration-200 group-hover:scale-105">
            <div class="text-xl mb-2">{option.icon}</div>
            <div class="text-sm font-medium text-slate-900 text-center">{option.label}</div>
            <div class="text-xs text-slate-600 text-center">{option.description}</div>
          </div>
        </label>
      ))}
    </div>
  </div>

  <!-- Relationship Selection -->
  <div class="bg-slate-50 p-4 rounded-lg">
    <h3 class="text-base font-semibold text-slate-800 mb-3">Vz≈•ah</h3>
    <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
      {[
        { value: 'rodina', label: 'Rodina', icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶' },
        { value: 'priatel', label: 'Priateƒæ', icon: 'üë´' },
        { value: 'kolega', label: 'Kolega', icon: 'üëî' },
        { value: 'partner', label: 'Partner', icon: 'üíï' }
      ].map((option) => (
        <label class="cursor-pointer group">
          <input
            type="radio"
            name="relationship"
            value={option.value}
            class="sr-only"
            checked={option.value === 'kolega'}
          />
          <div class="relationship-option flex flex-col items-center p-3 bg-white border-2 border-slate-200 rounded-lg hover:border-indigo-400 hover:shadow-sm transition-all duration-200 group-hover:scale-105">
            <div class="text-xl mb-2">{option.icon}</div>
            <div class="text-xs font-medium text-slate-900 text-center">{option.label}</div>
          </div>
        </label>
      ))}
    </div>
  </div>

  <!-- Type Selection -->
  <div class="bg-slate-50 p-4 rounded-lg">
    <h3 class="text-base font-semibold text-slate-800 mb-3">Typ darƒçeka</h3>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
      {[
        { value: 'z√°≈æitok', label: 'Z√°≈æitok', icon: 'üéØ' },
        { value: 'fyzick√Ω darƒçek', label: 'Fyzick√Ω darƒçek', icon: 'üéÅ' },
        { value: 'digit√°lne', label: 'Digit√°lne', icon: 'üíª' }
      ].map((option) => (
        <label class="cursor-pointer group">
          <input
            type="checkbox"
            name="type"
            value={option.value}
            class="sr-only"
            checked={option.value === 'fyzick√Ω darƒçek'}
          />
          <div class="type-option flex flex-col items-center p-3 bg-white border-2 border-slate-200 rounded-lg hover:border-indigo-400 hover:shadow-sm transition-all duration-200 group-hover:scale-105">
            <div class="text-xl mb-2">{option.icon}</div>
            <div class="text-xs font-medium text-slate-900 text-center">{option.label}</div>
          </div>
        </label>
      ))}
    </div>
  </div>

  <!-- Style Selection -->
  <div class="bg-slate-50 p-4 rounded-lg">
    <h3 class="text-base font-semibold text-slate-800 mb-3">≈†t√Ωl</h3>
    <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
      {[
        { value: 'minimalistick√Ω', label: 'Minimalistick√Ω', icon: '‚ö™' },
        { value: 'luxusn√Ω', label: 'Luxusn√Ω', icon: '‚ú®' },
        { value: 'hrav√Ω', label: 'Hrav√Ω', icon: 'üéÆ' },
        { value: 'eco', label: 'Eco', icon: 'üå±' }
      ].map((option) => (
        <label class="cursor-pointer group">
          <input
            type="checkbox"
            name="style"
            value={option.value}
            class="sr-only"
            checked={option.value === 'minimalistick√Ω'}
          />
          <div class="style-option flex flex-col items-center p-3 bg-white border-2 border-slate-200 rounded-lg hover:border-indigo-400 hover:shadow-sm transition-all duration-200 group-hover:scale-105">
            <div class="text-xl mb-2">{option.icon}</div>
            <div class="text-xs font-medium text-slate-900 text-center">{option.label}</div>
          </div>
        </label>
      ))}
    </div>
  </div>

  <!-- Delivery Selection -->
  <div class="bg-slate-50 p-4 rounded-lg">
    <h3 class="text-base font-semibold text-slate-800 mb-3">Dodanie</h3>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
      {[
        { value: 'dnes', label: 'Dnes', description: 'R√Ωchle dodanie', icon: '‚ö°' },
        { value: 'do-2-dni', label: 'Do 2 dn√≠', description: '≈†tandardn√©', icon: 'üì¶' },
        { value: 'nesk√¥r', label: 'Nesk√¥r', description: 'Flexibiln√©', icon: 'üìÖ' }
      ].map((option) => (
        <label class="cursor-pointer group">
          <input
            type="radio"
            name="delivery"
            value={option.value}
            class="sr-only"
            checked={option.value === 'do-2-dni'}
          />
          <div class="delivery-option flex flex-col items-center p-3 bg-white border-2 border-slate-200 rounded-lg hover:border-indigo-400 hover:shadow-sm transition-all duration-200 group-hover:scale-105">
            <div class="text-xl mb-2">{option.icon}</div>
            <div class="text-sm font-medium text-slate-900 text-center">{option.label}</div>
            <div class="text-xs text-slate-600 text-center">{option.description}</div>
          </div>
        </label>
      ))}
    </div>
  </div>

  <!-- Submit Button -->
  <button
    type="submit"
    class="w-full bg-slate-900 text-white py-3 px-6 rounded-lg font-semibold hover:bg-slate-800 transition-colors duration-200"
  >
    Uk√°≈æ darƒçeky
  </button>
</form>

<script>
  // Handle visual selection for radio buttons
  function updateRadioSelection(radioName, optionClass) {
    document.querySelectorAll(`input[name="${radioName}"]`).forEach(radio => {
      radio.addEventListener('change', function() {
        if (this.checked) {
          // Remove selection from all options
          document.querySelectorAll(`.${optionClass}`).forEach(option => {
            option.classList.remove('border-indigo-500', 'bg-indigo-50', 'ring-2', 'ring-indigo-200');
            option.classList.add('border-slate-200');
          });
          
          // Add selection to clicked option
          const selectedOption = this.closest('label').querySelector(`.${optionClass}`);
          if (selectedOption) {
            selectedOption.classList.remove('border-slate-200');
            selectedOption.classList.add('border-indigo-500', 'bg-indigo-50', 'ring-2', 'ring-indigo-200');
          }
        }
      });
    });
  }

  // Handle visual selection for checkboxes
  function updateCheckboxSelection(checkboxName, optionClass) {
    document.querySelectorAll(`input[name="${checkboxName}"]`).forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const option = this.closest('label').querySelector(`.${optionClass}`);
        
        if (this.checked) {
          option.classList.remove('border-slate-200');
          option.classList.add('border-indigo-500', 'bg-indigo-50', 'ring-2', 'ring-indigo-200');
        } else {
          option.classList.remove('border-indigo-500', 'bg-indigo-50', 'ring-2', 'ring-indigo-200');
          option.classList.add('border-slate-200');
        }
      });
    });
  }

  // Apply visual selection to all option types
  updateRadioSelection('budget', 'budget-option');
  updateRadioSelection('relationship', 'relationship-option');
  updateRadioSelection('delivery', 'delivery-option');
  updateCheckboxSelection('type', 'type-option');
  updateCheckboxSelection('style', 'style-option');

  // Add click handlers to labels for better UX
  document.querySelectorAll('label').forEach(label => {
    label.addEventListener('click', function(e) {
      const radio = this.querySelector('input[type="radio"]');
      const checkbox = this.querySelector('input[type="checkbox"]');
      
      if (radio) {
        radio.checked = true;
        radio.dispatchEvent(new Event('change'));
      } else if (checkbox) {
        checkbox.checked = !checkbox.checked;
        checkbox.dispatchEvent(new Event('change'));
      }
    });
  });

  // Initialize visual states on page load
  document.addEventListener('DOMContentLoaded', function() {
    // Set initial selected states
    document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
      radio.dispatchEvent(new Event('change'));
    });
    
    document.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
      checkbox.dispatchEvent(new Event('change'));
    });
  });
</script>
