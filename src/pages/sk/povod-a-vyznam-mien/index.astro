---
export const prerender = true;

import Layout from '../../../layouts/Layout.astro';
import SectionHeader from '../../../components/SectionHeader.astro';

// Import names origins data directly
import namesOrigins from '../../../data/names-origins.json';

const allOriginEntries = Object.values(namesOrigins);
const initialLoadCount = 12;
const loadMoreCount = 12;

// Get unique genders for filter
const genders = [...new Set(allOriginEntries.map(entry => entry.gender))].filter(Boolean);
const origins = [...new Set(allOriginEntries.map(entry => entry.origin).filter(Boolean))];
---

<Layout title="Pôvod a význam mien">
  <div class="container mx-auto px-4 py-16">
    <SectionHeader 
      title="Pôvod a význam mien" 
      lead="Objavte fascinujúce príbehy a históriu za slovenskými menami."
    />

    <!-- Search and Filter Section -->
    <div class="mb-8">
      <div class="max-w-2xl mx-auto">
        <!-- Search Input -->
        <div class="relative mb-6">
          <input 
            type="text" 
            id="searchInput"
            placeholder="Hľadať mená..." 
            class="w-full px-4 py-3 pl-12 pr-4 text-lg border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
          />
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>

        <!-- Filter Buttons -->
        <div class="flex flex-wrap justify-center gap-2 mb-6">
          <button 
            class="filter-btn active px-4 py-2 rounded-full text-sm font-medium transition-colors bg-indigo-600 text-white"
            data-filter="all"
          >
            Všetky ({allOriginEntries.length})
          </button>
          {genders.map(gender => (
            <button 
              class="filter-btn px-4 py-2 rounded-full text-sm font-medium transition-colors bg-gray-100 text-gray-700 hover:bg-gray-200"
              data-filter={gender}
            >
              {gender === 'M' ? 'Mužské' : gender === 'F' ? 'Ženské' : gender}
            </button>
          ))}
        </div>
      </div>
    </div>

    <!-- Names Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8" id="namesGrid">
      {allOriginEntries.slice(0, initialLoadCount).map((entry, index) => (
        <div class="name-card bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow p-6" data-gender={entry.gender} data-origin={entry.origin}>
          <div class="flex items-start justify-between mb-4">
            <h3 class="text-xl font-semibold text-gray-900">{entry.name}</h3>
            <span class="px-2 py-1 text-xs font-medium rounded-full bg-indigo-100 text-indigo-800">
              {entry.gender === 'M' ? 'Mužské' : entry.gender === 'F' ? 'Ženské' : entry.gender}
            </span>
          </div>
          
          <p class="text-gray-600 mb-4 line-clamp-3">{entry.description}</p>
          
          <div class="space-y-2">
            <div class="flex items-center text-sm text-gray-500">
              <span class="font-medium mr-2">Pôvod:</span>
              <span>{entry.origin}</span>
            </div>
            
            {entry.variants && entry.variants.length > 0 && (
              <div class="flex items-center text-sm text-gray-500">
                <span class="font-medium mr-2">Varianty:</span>
                <span>{entry.variants.join(', ')}</span>
              </div>
            )}
          </div>
          
          <div class="mt-4">
            <a 
              href={`/sk/meno/${entry.name.toLowerCase()}`}
              class="w-full inline-flex items-center justify-center px-4 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white text-sm font-medium rounded-lg hover:from-indigo-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 shadow-lg"
            >
              Zobraziť detail
              <svg class="ml-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
        </div>
      ))}
    </div>

    <!-- Hidden cards for load more functionality -->
    <div id="hiddenCards" class="hidden">
      {allOriginEntries.slice(initialLoadCount).map((entry, index) => (
        <div class="name-card bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow p-6" data-gender={entry.gender} data-origin={entry.origin}>
          <div class="flex items-start justify-between mb-4">
            <h3 class="text-xl font-semibold text-gray-900">{entry.name}</h3>
            <span class="px-2 py-1 text-xs font-medium rounded-full bg-indigo-100 text-indigo-800">
              {entry.gender === 'M' ? 'Mužské' : entry.gender === 'F' ? 'Ženské' : entry.gender}
            </span>
          </div>
          
          <p class="text-gray-600 mb-4 line-clamp-3">{entry.description}</p>
          
          <div class="space-y-2">
            <div class="flex items-center text-sm text-gray-500">
              <span class="font-medium mr-2">Pôvod:</span>
              <span>{entry.origin}</span>
            </div>
            
            {entry.variants && entry.variants.length > 0 && (
              <div class="flex items-center text-sm text-gray-500">
                <span class="font-medium mr-2">Varianty:</span>
                <span>{entry.variants.join(', ')}</span>
              </div>
            )}
          </div>
          
          <div class="mt-4">
            <a 
              href={`/sk/meno/${entry.name.toLowerCase()}`}
              class="w-full inline-flex items-center justify-center px-4 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white text-sm font-medium rounded-lg hover:from-indigo-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 shadow-lg"
            >
              Zobraziť detail
              <svg class="ml-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
        </div>
      ))}
    </div>

    <!-- Load More Button -->
    <div class="text-center" id="loadMoreContainer">
      <button 
        id="loadMoreBtn"
        class="px-8 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-bold rounded-full shadow-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-300 transform hover:scale-105"
      >
        Načítať ďalšie mená ({allOriginEntries.length - initialLoadCount} zostáva)
      </button>
    </div>

    <!-- No Results Message -->
    <div id="noResults" class="hidden text-center py-12">
      <div class="text-gray-500 text-lg">
        <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29-1.009-5.824-2.709M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
        </svg>
        <p>Žiadne mená sa nenašli pre váš vyhľadávací výraz.</p>
        <p class="text-sm mt-2">Skúste zmeniť vyhľadávací výraz alebo filtrovanie.</p>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const searchInput = document.getElementById('searchInput');
      const filterButtons = document.querySelectorAll('.filter-btn');
      const namesGrid = document.getElementById('namesGrid');
      const hiddenCards = document.getElementById('hiddenCards');
      const loadMoreBtn = document.getElementById('loadMoreBtn');
      const loadMoreContainer = document.getElementById('loadMoreContainer');
      const noResults = document.getElementById('noResults');
      
      let loadedCount = 12;
      let currentFilter = 'all';
      let currentQuery = '';
      
      // Collect all cards (visible and hidden)
      const allCards = [...document.querySelectorAll('.name-card')];
      
      function normalizeText(text) {
        return text.toLowerCase()
          .replace(/[áä]/g, "a")
          .replace(/[č]/g, "c")
          .replace(/[ď]/g, "d")
          .replace(/[é]/g, "e")
          .replace(/[í]/g, "i")
          .replace(/[ĺľ]/g, "l")
          .replace(/[ň]/g, "n")
          .replace(/[óô]/g, "o")
          .replace(/[ŕ]/g, "r")
          .replace(/[š]/g, "s")
          .replace(/[ť]/g, "t")
          .replace(/[ú]/g, "u")
          .replace(/[ý]/g, "y")
          .replace(/[ž]/g, "z")
          .replace(/[-_]/g, ""); // Remove hyphens and underscores
      }
      function filterCards() {
        const filteredCards = allCards.filter(card => {
          const name = card.querySelector('h3').textContent.toLowerCase();
          const gender = card.dataset.gender;
          const origin = card.dataset.origin;
          
          const normalizedName = normalizeText(name);
          const normalizedQuery = normalizeText(currentQuery);
          const matchesQuery = !currentQuery || normalizedName.includes(normalizedQuery);
          
          // Debug logging for Petra search
          if (currentQuery && currentQuery.toLowerCase() === "petra") {
            console.log("Searching for Petra:", {
              name: name,
              normalizedName: normalizedName,
              query: currentQuery,
              normalizedQuery: normalizedQuery,
              matchesQuery: matchesQuery
            });
          }          const matchesFilter = currentFilter === 'all' || gender === currentFilter;
          
          return matchesQuery && matchesFilter;
        });
        
        // Clear current grid
        namesGrid.innerHTML = '';
        
        // Show filtered cards up to loadedCount
        const cardsToShow = filteredCards.slice(0, loadedCount);
        cardsToShow.forEach(card => {
          namesGrid.appendChild(card);
        });
        
        // Show/hide load more button
        if (filteredCards.length > loadedCount) {
          loadMoreContainer.classList.remove('hidden');
          loadMoreBtn.textContent = `Načítať ďalšie mená (${filteredCards.length - loadedCount} zostáva)`;
        } else {
          loadMoreContainer.classList.add('hidden');
        }
        
        // Show/hide no results message
        if (cardsToShow.length === 0) {
          noResults.classList.remove('hidden');
        } else {
          noResults.classList.add('hidden');
        }
      }
      
      // Search functionality
      searchInput.addEventListener('input', function() {
        currentQuery = this.value;
        loadedCount = 12; // Reset loaded count on new search
        filterCards();
      });
      
      // Filter functionality
      filterButtons.forEach(btn => {
        btn.addEventListener('click', function() {
          // Update active button
          filterButtons.forEach(b => {
            b.classList.remove('active', 'bg-indigo-600', 'text-white');
            b.classList.add('bg-gray-100', 'text-gray-700');
          });
          this.classList.add('active', 'bg-indigo-600', 'text-white');
          this.classList.remove('bg-gray-100', 'text-gray-700');
          
          currentFilter = this.dataset.filter;
          loadedCount = 12; // Reset loaded count on new filter
          filterCards();
        });
      });
      
      // Load more functionality
      loadMoreBtn.addEventListener('click', function() {
        loadedCount += 12;
        filterCards();
      });
      
      // Initial filter
      filterCards();
    });
  </script>

  <style>
    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>
</Layout>
